meta:
  title: "Blocklet SDK | 适用于 Node.js 和浏览器的开发工具包"
  description: "使用 Blocklet Node.js 和浏览器 SDK，轻松将您的应用与 Blocklet Server 集成、管理 DID 身份验证并访问强大的平台服务。"
sections:
  - sectionName: "sdkHero"
    sectionSummary: "通过清晰的标题和简单强大的代码片段，立即吸引开发者的注意力，展示 Blocklet SDK 的易用性。"
    verticalHeroTitle: "更快地构建强大的 Blocklet。您的 Node.js 与浏览器开发工具包。"
    verticalHeroDescription: "无需重复造轮子。利用一套内置服务，涵盖去中心化身份（DID）、通知、数据存储等。专注于您应用的独特功能，其余的交给 SDK 处理。"
    verticalHeroCode:
      name: "main.js"
      content: "import { BlockletSDK } from '@blocklet/js-sdk';\n\nconst sdk = new BlockletSDK();\n\nasync function getUser() {\n  await sdk.user.login();\n  const userInfo = await sdk.user.getProfile();\n  console.log(userInfo);\n}"
  - sectionName: "sdkIntroduction"
    sectionSummary: "并列介绍两种不同的 SDK（Node.js 和浏览器），阐明其用途和目标环境，帮助开发者快速找到适合自己需求的工具。"
    list:
      - sectionName: "nodejsSdkCard"
        sectionSummary: "详细介绍用于后端开发的 Node.js SDK，突出其关键功能，并提供简洁的代码示例以展示其用法。"
        contentCardTitle: "Node.js SDK：为您的后端赋能"
        contentCardDescription: "满足您所有后端需求的服务器端 SDK。在您的 Node.js 环境中处理身份验证、管理数据、发送通知，并与 Blocklet Server 服务深度集成。"
        contentCardBottomCode:
          name: "server.js"
          content: "import { BlockletService, getWallet } from '@blocklet/sdk';\n\n// Access blocklet's own DID wallet\nconst wallet = getWallet();\n\n// Perform cryptographic operations\nconst signature = await wallet.sign('hello world');"
      - sectionName: "browserSdkCard"
        sectionSummary: "详细介绍用于前端开发的浏览器 SDK，展示其用于创建动态用户体验的功能，并提供简单的代码片段。"
        contentCardTitle: "浏览器 SDK：为您的前端注入活力"
        contentCardDescription: "适用于您 Web 应用的客户端 SDK。轻松管理用户会话、处理 DID Connect 流程、与其他 Blocklet 通信以及进行安全的 API 调用。"
        contentCardBottomCode:
          name: "app.js"
          content: "import { BlockletSDK } from '@blocklet/js-sdk';\n\nconst sdk = new BlockletSDK();\n\n// Get info about the current blocklet\nconst info = await sdk.blocklet.getInfo();\nconsole.log(info.name);"
    twoColumnGridTitle: ""
  - sectionName: "nodejsFeatures"
    sectionSummary: "在一个易于浏览的网格中展示 Node.js SDK 的主要功能，突出开发者可以为其后端获得的强大、开箱即用的能力。"
    threeColumnGridTitle: "Node.js SDK 包含哪些功能？"
    list:
      - sectionName: "authFeature"
        sectionSummary: "突出 Node.js SDK 全面的身份验证功能。"
        iconName: "mdi:shield-lock-outline"
        cardTitle: "身份验证与安全"
        cardDescription: "集成多渠道身份验证，包括 DID、Passkey、OAuth 和电子邮件。轻松管理 JWT 和基于角色的访问控制。"
      - sectionName: "walletFeature"
        sectionSummary: "展示用于加密操作的内置 DID 钱包集成。"
        iconName: "mdi:wallet-outline"
        cardTitle: "钱包集成"
        cardDescription: "访问 Blocklet 的内置 DID 钱包，以执行签名数据和验证凭证等加密操作。"
      - sectionName: "databaseFeature"
        sectionSummary: "解释 SDK 提供的简单嵌入式数据库解决方案。"
        iconName: "mdi:database-outline"
        cardTitle: "数据库服务"
        cardDescription: "利用内置的 NeDB 嵌入式数据库实现简单的、基于文件的数据持久化，无需外部依赖。"
      - sectionName: "notificationFeature"
        sectionSummary: "详细介绍用于用户互动的多渠道通知功能。"
        iconName: "mdi:bell-ring-outline"
        cardTitle: "通知服务"
        cardDescription: "向用户的 DID 钱包、浏览器或其他渠道（如电子邮件和 Slack）发送丰富的交互式通知。"
      - sectionName: "middlewareFeature"
        sectionSummary: "突出预置的 Web 框架中间件带来的便利。"
        iconName: "mdi:layers-triple-outline"
        cardTitle: "Express 中间件"
        cardDescription: "为 Express.js 提供即插即用的中间件，自动处理请求验证和注入运行时信息。"
      - sectionName: "loggingFeature"
        sectionSummary: "展示用于简化调试和监控的结构化日志记录。"
        iconName: "mdi:math-log"
        cardTitle: "结构化日志"
        cardDescription: "实现具有可配置调试级别的结构化日志记录，以便轻松监控和排查您的应用程序。"
  - sectionName: "browserFeatures"
    sectionSummary: "展示浏览器 SDK 的主要功能，重点介绍它如何简化会话管理和 API 通信等前端开发任务。"
    threeColumnGridTitle: "浏览器 SDK 包含哪些功能？"
    list:
      - sectionName: "clientAuthFeature"
        sectionSummary: "突出用于无缝用户登录的前端身份验证服务。"
        iconName: "mdi:login"
        cardTitle: "身份验证服务"
        cardDescription: "使用 DID Connect 轻松管理前端身份验证流程、用户个人资料和安全登录状态。"
      - sectionName: "sessionFeature"
        sectionSummary: "解释 SDK 如何管理客户端用户会话。"
        iconName: "mdi:account-clock-outline"
        cardTitle: "会话管理"
        cardDescription: "处理客户端会话状态，包括跨浏览器会话的持久化和安全的用户上下文。"
      - sectionName: "apiClientFeature"
        sectionSummary: "展示用于 API 调用的预配置、安全的 HTTP 客户端。"
        iconName: "mdi:api"
        cardTitle: "安全 API 客户端"
        cardDescription: "使用预配置的 Axios 客户端进行安全的、经过身份验证的 API 调用，该客户端内置了用于 CSRF 和令牌处理的拦截器。"
      - sectionName: "federatedFeature"
        sectionSummary: "详细介绍不同 Blocklet 之间的通信能力。"
        iconName: "mdi:arrow-decision-outline"
        cardTitle: "联合服务"
        cardDescription: "实现安全的跨 Blocklet 通信，让您的前端能够与其他 Blocklet 的服务进行交互。"
      - sectionName: "tokenFeature"
        sectionSummary: "为方便开发者，解释 JWT 令牌的自动管理机制。"
        iconName: "mdi:key-chain"
        cardTitle: "令牌管理"
        cardDescription: "告别令牌管理的烦恼。SDK 会为您处理自动令牌刷新和基于 Cookie 的安全存储。"
      - sectionName: "cacheFeature"
        sectionSummary: "突出内置缓存层带来的性能优势。"
        iconName: "mdi:memory"
        cardTitle: "性能缓存"
        cardDescription: "利用内置的 LRU 缓存，通过减少对频繁访问数据的冗余请求来优化性能。"
  - sectionName: "sdkFaq"
    sectionSummary: "主动回答开发者常见问题，以建立信心并减少支持开销。本节阐明了安装、兼容性以及在哪里可以找到更详细的信息。"
    faqTitle: "常见问题解答"
    faqList:
      - question: "如何安装 SDK？"
        answer: "非常简单！您可以通过您喜欢的包管理器进行安装。对于 Node.js，运行 `npm install @blocklet/sdk`。对于浏览器，使用 `npm install @blocklet/js-sdk`。"
      - question: "SDK 是否支持 TypeScript？"
        answer: "当然支持！两个 SDK 都是用 TypeScript 编写的，并开箱即用地提供了完整的类型定义，为您带来绝佳的类型安全开发体验。"
      - question: "我可以在 Blocklet 之外使用 SDK 吗？"
        answer: "SDK 是为 Blocklet Server 环境专门构建的。它们与其身份验证、配置等服务深度集成，因此无法独立工作。"
      - question: "在哪里可以找到完整的 API 文档？"
        answer: "我们全面的开发者文档包含完整的 API 参考、入门指南和实用示例。点击下方的“阅读文档”按钮即可深入了解！"
      - question: "有社区或支持渠道吗？"
        answer: "是的！加入我们的社区论坛，可以提问、分享您正在构建的项目，并与其他开发者交流。我们总是很高兴看到您的创造！"
  - sectionName: "sdkCta"
    sectionSummary: "通过清晰而有吸引力的行动号召，推动开发者迈出下一步。最后这一部分鼓励用户立即查阅文档或参与社区。"
    ctaTitle: "准备好开始构建了吗？"
    ctaDescription: "深入阅读文档，探索源代码，看看您能用 Blocklet SDK 创造出什么。您的下一个卓越应用就从此时此地开始！"
    cta:
      - text: "阅读文档"
        link: "https://docs.blocklet.io/"
      - text: "在 GitHub 上查看"
        link: "https://github.com/ArcBlock/blocklet-sdk"