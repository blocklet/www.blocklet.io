meta:
  title: "Blocklet SDK：赋能平台应用构建的强大工具"
  description: "深入了解适用于 Node.js 和浏览器的 Blocklet SDK，它提供了一整套用于身份验证、钱包管理、Blocklet 间通信等功能的综合 API。"
sections:
  - sectionName: "sdkHero"
    sectionSummary: "介绍 Blocklet SDK，包含一个强有力的标题、对其用途的简要说明以及一个代码片段，以立即吸引开发者。"
    verticalHeroTitle: "Blocklet 开发的终极工具包"
    verticalHeroDescription: "使用 Blocklet SDK 为您的应用程序增添强大动力。它是将您的代码连接到 Blocklet Server 的核心库，提供了一整套用于身份、钱包、通知等功能的完整 API。"
    verticalHeroCode:
      name: "index.js"
      content: "import { BlockletService, Notification, Database, getWallet } from '@blocklet/sdk';\n\n// 你的神奇应用逻辑从这里开始！\nconst start = async () => {\n  const wallet = getWallet();\n  console.log('Blocklet DID:', wallet.did);\n\n  const db = new Database('my-data');\n  await db.put('hello', 'world');\n};\n\nstart();"
  - sectionName: "sdkCoreFeatures"
    sectionSummary: "在一个视觉上吸引人的 3 列网格中突出 SDK 的关键模块和功能，使开发者能够轻松浏览和理解其能力。"
    threeColumnGridTitle: "开箱即用，满足您所有需求的强大功能"
    list:
      - sectionName: "authenticationService"
        sectionSummary: "身份验证服务的功能卡片。"
        iconName: "mdi:shield-lock-outline"
        cardTitle: "身份验证服务"
        cardDescription: "通过内置的 DID Connect、角色管理和可验证凭证，轻松管理用户身份。安全、无密码登录从未如此简单。"
      - sectionName: "walletManagement"
        sectionSummary: "钱包管理的功能卡片。"
        iconName: "mdi:wallet-outline"
        cardTitle: "钱包管理"
        cardDescription: "以编程方式访问 Blocklet 的内部 DID 钱包。使用简单的 API 签署数据、验证凭证并执行加密操作。"
      - sectionName: "didConnect"
        sectionSummary: "DID Connect 集成的功能卡片。"
        iconName: "mdi:account-key-outline"
        cardTitle: "DID Connect"
        cardDescription: "将安全、去中心化的身份集成到您的应用中。让用户使用其外部 DID 钱包无缝、安全地登录。"
      - sectionName: "notifications"
        sectionSummary: "通知服务的功能卡片。"
        iconName: "mdi:bell-ring-outline"
        cardTitle: "通知"
        cardDescription: "直接向用户的 DID 钱包发送丰富、可交互的通知。让您的用户保持参与，并随时了解您应用中的重要事件。"
      - sectionName: "environmentAndConfig"
        sectionSummary: "环境和配置访问的功能卡片。"
        iconName: "mdi:cog-outline"
        cardTitle: "环境与配置"
        cardDescription: "轻松访问系统环境变量和 Blocklet 的配置文件，让您的应用能够在任何环境中完美适应和运行。"
      - sectionName: "expressMiddleware"
        sectionSummary: "Express 中间件的功能卡片。"
        iconName: "mdi:puzzle-outline"
        cardTitle: "Express.js 中间件"
        cardDescription: "将我们的中间件放入您的 Express.js 应用中，即可自动处理请求验证并将运行时信息直接注入到您的前端。"
  - sectionName: "sdkShowcase"
    sectionSummary: "并排展示两个不同的 SDK——用于后端的 Node.js 和用于浏览器的 JS——以及代码示例，阐明它们各自的角色和用例。"
    oneColumnGridTitle: "一个平台，两个强大的 SDK"
    list:
      - sectionName: "nodeSdk"
        sectionSummary: "Node.js SDK 的详细信息，用于服务器端开发。"
        contentCardTitle: "Node.js SDK：为您的后端赋能"
        contentCardDescription: "使用 `@blocklet/node-sdk` 构建稳健的服务器端逻辑。它非常适合在安全的 Blocklet Server 环境中处理身份验证、数据库操作和核心业务逻辑。"
        contentCardRightCode:
          name: "auth.js"
          content: "import { BlockletAuthenticator } from '@blocklet/sdk';\n\nconst authenticator = new BlockletAuthenticator();\n\n// 示例：保护一个 Express 路由\napp.get('/api/protected', authenticator.vaild(), (req, res) => {\n  res.json({ user: req.user });\n});"
      - sectionName: "browserSdk"
        sectionSummary: "浏览器 SDK 的详细信息，用于客户端开发。"
        contentCardTitle: "浏览器 SDK：为您的前端注入活力"
        contentCardDescription: "使用 `@blocklet/js-sdk` 让您的用户界面焕发生机。管理客户端会话，自动处理令牌刷新，并与后端服务及其他 Blocklet 安全通信。"
        contentCardRightCode:
          name: "app.js"
          content: "import { BlockletSDK } from '@blocklet/js-sdk';\n\nconst sdk = new BlockletSDK();\n\nasync function getUser() {\n  await sdk.user.login();\n  const userInfo = sdk.user.profile;\n  console.log('Welcome,', userInfo.name);\n}"
  - sectionName: "sdkFaq"
    sectionSummary: "解答开发者可能对 SDK 提出的常见问题，为常见疑问提供快速、清晰的答案，减少不确定性。"
    faqTitle: "常见问题"
    faqList:
      - question: "Blocklet SDK 只适用于 Node.js 吗？"
        answer: "并非如此！我们提供两个主要的 SDK：用于后端服务的 `@blocklet/node-sdk` 和用于客户端浏览器应用的 `@blocklet/js-sdk`。您将获得整个技术栈所需的工具。"
      - question: "SDK 的身份验证是如何工作的？"
        answer: "SDK 使其变得异常简单！它与 DID Connect 完全集成，允许您实现安全的无密码身份验证，用户可以使用其去中心化身份钱包登录。"
      - question: "我的 Blocklet 可以与其他 Blocklet 通信吗？"
        answer: "当然可以！这是平台可组合设计的核心部分。SDK 提供了对联合服务和事件总线的访问，从而实现无缝、安全的 Blocklet 间通信。"
      - question: "我需要自己管理数据库连接吗？"
        answer: "不需要！SDK 包含一个简单、内置的数据库模块 (NeDB)，非常适合大多数用例，让您无需任何复杂设置即可快速上手。您可以专注于构建功能，而不是数据库管理。"
      - question: "我在哪里可以找到完整的 API 文档？"
        answer: "您可以深入研究我们全面的技术文档，探索所有可用的模块、类和方法。请查看架构页面以进行深入了解！"
  - sectionName: "sdkCta"
    sectionSummary: "一个最终的、以行动为导向的号召，鼓励开发者采取下一步行动，无论是探索文档还是返回主页。"
    ctaTitle: "准备好构建您的第一个 Blocklet 了吗？"
    ctaDescription: "深入了解架构，探索各种可能性，看看 Blocklet SDK 如何帮助您构建下一代去中心化应用。"
    cta:
      - text: "查看架构"
        link: "link:///architecture"
      - text: "返回首页"
        link: "link:///home"